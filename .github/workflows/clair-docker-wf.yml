name: "clair docker apache2 images CI workflow"


on:
  push:
    branches: [ test ]


jobs:

# https://www.katacoda.com/courses/docker-security/image-scanning-with-clair
  ubuntu-latest-apache2-job:
    name: "clair apache2 images  ubuntu latest"
    runs-on: ubuntu-latest
    env:
      version: "latest"
      name: "ubuntu2104/apache2"
      dockerdir: "dockerfiles"
      dockerfile: "Dockerfile.ubuntu2104.apache"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch         
    - name: "docker build apache base"
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        sudo docker build --no-cache --rm  -t ${name}/${version} . --file ${dockerdir}/${dockerfile} 
        docker image ls
        docker image history ${name}/${version} 
        docker system df -v               
        docker image inspect ${name}/${version} 
    - name: "docker scan clair archlinux base "
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        # Download 
        sudo curl -LO https://raw.githubusercontent.com/coreos/clair/05cbf328aa6b00a167124dbdbec229e348d97c04/contrib/compose/docker-compose.yml      
        # The Clair configuration defines how Images should be scanned. 
        mkdir clair_config && curl -L https://raw.githubusercontent.com/coreos/clair/master/config.yaml.sample -o clair_config/config.yaml
        # Set the version of Clair to the last stable release and the default database password
        sed 's/clair-git:latest/clair:v2.0.1/' -i docker-compose.yml && \
          sed 's/host=localhost/host=postgres password=password/' -i clair_config/config.yaml
        # Start the database
        docker-compose up -d postgres
        docker-compose ps 
        # Download and load the CVE details for Clair to use.
        curl -LO https://gist.githubusercontent.com/BenHall/34ae4e6129d81f871e353c63b6a869a7/raw/5818fba954b0b00352d07771fabab6b9daba5510/clair.sql
        # docker run -it \
        #     -v $(pwd):/sql/ \
        #     --network "${USER}_default" \
        #     --link clair_postgres:clair_postgres \
        #     postgres:latest \
        #         bash -c "PGPASSWORD=password psql -h clair_postgres -U postgres < /sql/clair.sql"
        docker run \
            -v $(pwd):/sql/ \
            --network "${USER}_default" \
            --link clair_postgres:clair_postgres \
            postgres:latest \
                bash -c "PGPASSWORD=password psql -h clair_postgres -U postgres < /sql/clair.sql"                
        docker-compose up -d clair
        # Klar is a simple tool to analyze images stored in a private 
        # or public Docker registry for security vulnerabilities using Clair.
        curl -L https://github.com/optiopay/klar/releases/download/v1.5/klar-1.5-linux-amd64 -o /usr/local/bin/klar && chmod +x $_
        # Using klar, point it at images and see what vulnerabilities they contain
        # example quay.io/coreos/clair:v2.0.1.
        CLAIR_ADDR=http://localhost:6060 CLAIR_OUTPUT=Low CLAIR_THRESHOLD=10 \
        klar quay.io/coreos/clair:v2.0.1
        sudo apt-get install jq -qy
        CLAIR_ADDR=http://localhost:6060 CLAIR_OUTPUT=High CLAIR_THRESHOLD=10 \
            JSON_OUTPUT=true klar postgres:latest | jq
        docker run -d --name registry -p 5000:5000 registry:2


  ubuntu-latest-dvwa-job:
    name: "clair dvwa image  ubuntu latest"
    runs-on: ubuntu-latest
    env:
      version: "latest"
      name: "ubuntu2104/apache2"
      dockerdir: "dockerfiles"
      dockerfile: "Dockerfile.ubuntu2104.apache"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch         
    - name: "run clair against dvwa"
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        mkdir -p clair/docker-compose-data/clair-config
        wget https://raw.githubusercontent.com/jgsqware/clairctl/master/docker-compose.yml --directory-prefix=clair/docker-compose-data/
        wget https://raw.github.com/jgsqware/clairctl/master/docker-compose-data/clair-config/config.yml --directory-prefix=clair/clair-config/
        cd clair/docker-compose-data
        docker-compose up
        # docker-compose ps
        # docker pull infoslack/dvwa
        # docker image ls
        # docker container ls
        # # docker-compose exec clairctl tells the Docker environment 
        # # to execute the following command on Docker container clairctl
        # docker-compose exec clairctl clairctl analyze -l infoslack/dvwa
        # # create a report underneath the docker-compose-data folder
        # docker-compose exec clairctl clairctl report -l infoslack/dvwa
        # sudo apt-get install lynx -qy
        # cd docker-compose-data && Lynx "html file to view".html